name: High_Level Whale Monitor (LBank) - Debuggable Full

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

concurrency:
  group: high_level-lbank
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies (safe)
      run: |
        if [ -f requirements.txt ]; then
          echo "üîÅ Installing from requirements.txt"
          pip install -r requirements.txt
        else
          echo "‚ö†Ô∏è requirements.txt not found ‚Äî installing minimal deps"
          pip install requests pandas loguru
        fi

    - name: Ensure logs & data folders exist
      run: |
        mkdir -p data
        mkdir -p logs
        # create .gitkeep so folder is tracked after commit
        if [ ! -f data/.gitkeep ]; then
          touch data/.gitkeep
        fi

    - name: Run High_Level script (capture output)
      id: run_high_level
      run: |
        set -o pipefail
        echo "RUN: python -u High_Level.py (capturing output to run_script_output.log)"
        if [ -f High_Level.py ]; then
          python -u High_Level.py 2>&1 | tee run_script_output.log
        elif [ -f high_level.py ]; then
          # backward-compat fallback if someone left lower-case file
          python -u high_level.py 2>&1 | tee run_script_output.log
        else
          echo "‚ö†Ô∏è No script found: High_Level.py or high_level.py" | tee run_script_output.log
          exit 1
        fi
      shell: bash

    - name: Upload run script log (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: high-level-run-log
        path: run_script_output.log

    - name: Show run_log.txt (if exists)
      if: always()
      run: |
        if [ -f logs/run_log.txt ]; then
          echo "üìú Showing last 200 lines of logs/run_log.txt"
          tail -n 200 logs/run_log.txt || true
        elif [ -f run_log.txt ]; then
          echo "üìú Showing last 200 lines of run_log.txt"
          tail -n 200 run_log.txt || true
        else
